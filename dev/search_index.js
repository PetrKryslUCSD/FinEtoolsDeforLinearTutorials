var documenterSearchIndex = {"docs":
[{"location":"tutorials/FV32_tut.html#TEST-FV32:-Cantilevered-tapered-membrane,-free-vibration","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"","category":"section"},{"location":"tutorials/FV32_tut.html#Description","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"Description","text":"","category":"section"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"FV32: Cantilevered tapered membrane is a test recommended by the National Agency for Finite Element Methods and Standards (U.K.): Test FV32 from NAFEMS publication TNSB, Rev. 3, “The Standard NAFEMS Benchmarks,” October 1990.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"Reference solution: 44.623  130.03  162.70  246.05  379.90  391.44 for the first six modes.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"The benchmark is originally for plane stress conditions. We simulate the plane-stress conditions with a three-dimensional mesh that is constrained along one plane of nodes to effect the constrained motion only in the plane of the trapezoidal membrane.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"(Image: )","category":"page"},{"location":"tutorials/FV32_tut.html#References","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"References","text":"","category":"section"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"[1] Test FV32 from NAFEMS publication TNSB, Rev. 3, “The Standard NAFEMS Benchmarks,” October 1990.","category":"page"},{"location":"tutorials/FV32_tut.html#Goals","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"Goals","text":"","category":"section"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"Show how to generate hexahedral mesh in a rectangular block  and shape it into a trapezoid.\nSet up model data for the solution algorithms.\nUse two different finite element model machines to evaluate the stiffness and the mass.\nExecute the modal algorithm and export the results with another algorithm.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"#","category":"page"},{"location":"tutorials/FV32_tut.html#Definitions","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"Definitions","text":"","category":"section"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"Bring in the required support from the basic linear algebra, eigenvalue solvers, and the finite element tools.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"using LinearAlgebra\nusing Arpack\nusing FinEtools\nusing FinEtools\nusing FinEtoolsDeforLinear\nusing FinEtoolsDeforLinear: AlgoDeforLinearModule","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"The input data is given by the benchmark.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"E = 200*phun(\"GPA\");\nnu = 0.3;\nrho= 8000*phun(\"KG/M^3\");\nL = 10*phun(\"M\");\nW0 = 5*phun(\"M\");\nWL = 1*phun(\"M\");\nH = 0.05*phun(\"M\");","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"We shall generate a three-dimensional mesh. It should have 1 element through the thickness, and 8 and 4 elements in the plane of the membrane.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"nL, nW, nH = 8, 4, 1;# How many element edges per side?","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"The reference frequencies are obtained from [1].","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"Reffs = [44.623 130.03  162.70  246.05  379.90  391.44]","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"The three-dimensional mesh of 20 node serendipity hexahedral should correspond to the plane-stress quadratic serendipity quadrilateral (CPS8R) used in the Abaqus benchmark. We simulate the plane-stress conditions with a three-dimensional mesh that is constrained along one plane of nodes to effect the constrained motion only in the plane of the trapezoidal membrane. No bending out of plane! First we generate mesh of a rectangular block.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"fens,fes = H20block(1.0, 2.0, 1.0, nL, nW, nH)","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"Now distort the rectangular block into the tapered plate.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"for i in 1:count(fens)\n    xi, eta, theta = fens.xyz[i,:];\n    eta = eta - 1.0\n    fens.xyz[i,:] = [xi*L eta*(1.0 - 0.8*xi)*W0/2 theta*H/2];\nend","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"We can visualize the mesh with Paraview (for instance).","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"File =  \"FV32-mesh.vtk\"\nvtkexportmesh(File, fens, fes)\n@async run(`\"paraview.exe\" $File`)","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"The simulation will be executed with the help of algorithms defined in the package FinEtoolsDeforLinear. The algorithms accept a dictionary of model data. The model data dictionary will be built up as follows.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"First we make the interior region. The model reduction is for a three-dimensional finite element model.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"MR = DeforModelRed3D\nmaterial = MatDeforElastIso(MR, rho, E, nu, 0.0)","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"We shall create two separate finite element model machines. They are distinguished by the quadrature rule. The mass rule, in order to evaluate the mass matrix accurately, needs to be of higher order than the one we prefer to use for the stiffness.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"region1 = FDataDict(\"femm\"=>FEMMDeforLinear(MR, IntegDomain(fes, GaussRule(3,2)), material), \"femm_mass\"=>FEMMDeforLinear(MR, IntegDomain(fes, GaussRule(3,3)), material))","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"Select nodes that will be clamped.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"nl1 = selectnode(fens; plane=[1.0 0.0 0.0 0.0], thickness=H/1.0e4)\nebc1 = FDataDict(\"node_list\"=>nl1, \"component\"=>1, \"displacement\"=>0.0)\nebc2 = FDataDict(\"node_list\"=>nl1, \"component\"=>2, \"displacement\"=>0.0)\nebc3 = FDataDict(\"node_list\"=>nl1, \"component\"=>3, \"displacement\"=>0.0)","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"Export  a VTK file to visualize the selected points. Choose the representation \"Points\", and select color and size approximately 4. These notes should correspond to the clamped base of the membrane.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"File =  \"FV32-nl1.vtk\"\nvtkexportmesh(File, fens, FESetP1(reshape(nl1, length(nl1), 1)))","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"Select all nodes on the plane Z = 0. This will be prevented from moving in the Z direction.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"nl4 = selectnode(fens; plane=[0.0 0.0 1.0 0.0], thickness=H/1.0e4)\nebc4 = FDataDict(\"node_list\"=>nl4, \"component\"=>3, \"displacement\"=>0.0)","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"Export  a VTK file to visualize the selected points. Choose the representation \"Points\", and select color and size approximately 4. These points all should be on the bottom face of the three-dimensional domain.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"File =  \"FV32-nl4.vtk\"\nvtkexportmesh(File, fens, FESetP1(reshape(nl4, length(nl4), 1)))","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"Make model data: the nodes, the regions, the boundary conditions, and the number of eigenvalues are set. Note that the number of eigenvalues needs to be set to 6+N,  where 6 is the number of rigid body modes, and N is the number of deformation frequencies we are interested in.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"neigvs = 10                  # how many eigenvalues\nmodeldata =  FDataDict(\"fens\"=> fens, \"regions\"=>  [region1], \"essential_bcs\"=>[ebc1 ebc2 ebc3 ebc4], \"neigvs\"=>neigvs)","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"Solve using an algorithm: the modal solver. The solver will supplement the model data with the geometry and displacement fields, and the solution (eigenvalues, eigenvectors), and the data upon return can be extracted from the dictionary.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"modeldata = AlgoDeforLinearModule.modal(modeldata)","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"Here we extract the angular velocities corresponding to the natural frequencies.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"fs = modeldata[\"omega\"]/(2*pi)\nprintln(\"Eigenvalues: $fs [Hz]\")\nprintln(\"Percentage frequency errors: $((vec(fs[1:6]) - vec(Reffs))./vec(Reffs)*100)\")","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"The problem was solved for instance with Abaqus, using plane stress eight node elements. The results were:","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"Element Frequencies (relative errors)\nCPS8R 44.629 (0.02)   130.11 (0.06)   162.70 (0.00)   246.42 (0.15)   381.32 (0.37)   391.51 (0.02)","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"Compared these numbers with those computed by our three-dimensional model.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"The mode shapes may be visualized with paraview. Here is for instance mode 8: (Image: )","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"The algorithm to export the mode shapes expects some input. We shall specify the filename and the numbers of modes to export.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"modeldata[\"postprocessing\"] = FDataDict(\"file\"=>\"FV32-modes\", \"mode\"=>1:neigvs)\nmodeldata = AlgoDeforLinearModule.exportmode(modeldata)","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"The algorithm attaches a little bit to the name of the exported file. If paraview.exe is installed, the command below should bring up the postprocessing file.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"@async run(`\"paraview.exe\" $(modeldata[\"postprocessing\"][\"file\"]*\"1.vtk\")`)","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"To animate the mode shape in Paraview do the following:","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"Apply the filter \"Warp by vector\".\nTurn on the \"Animation view\".\nAdd the mode shape data set (\"WarpByVector1\") by clicking the \"+\".\nDouble-click the line with the data set. The \"Animation Keyframes\" dialog will come up. Double-click \"Ramp\" interpolation, and change it to \"Sinusoid\". Set the frequency to 1.0. Change the \"Value\" from 0 to 100.\nIn the animation view, set the mode to \"Real-time\", and the duration to 4.0 seconds.\nClick on the \"Play\" button. If you wish, click on the \"Loop\" button.","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"true","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"","category":"page"},{"location":"tutorials/FV32_tut.html","page":"TEST FV32: Cantilevered tapered membrane, free vibration","title":"TEST FV32: Cantilevered tapered membrane, free vibration","text":"This page was generated using Literate.jl.","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html#Vibration-of-a-cube-of-nearly-incompressible-material","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"","category":"section"},{"location":"tutorials/unit_cube_modes_tut.html#Description","page":"Vibration of a cube of nearly incompressible material","title":"Description","text":"","category":"section"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"Compute the free-vibration spectrum of a unit cube of nearly incompressible isotropic material, E = 1, ν = 0.499, and ρ = 1 (refer to [1]).","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"The solution with the FinEtools package is compared with a commercial software  solution, and hence we also export the model to Abaqus.","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html#References","page":"Vibration of a cube of nearly incompressible material","title":"References","text":"","category":"section"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"[1] Puso MA, Solberg J (2006) A stabilized nodally integrated tetrahedral. International Journal for Numerical Methods in Engineering 67: 841-867. [2] P. Krysl, Mean-strain 8-node hexahedron with optimized energy-sampling stabilization, Finite Elements in Analysis and Design 108 (2016) 41–53.","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"(Image: )","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html#Goals","page":"Vibration of a cube of nearly incompressible material","title":"Goals","text":"","category":"section"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"Show how to generate hexahedral mesh, mirroring and merging together parts.\nExport the model to Abaqus.","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"#","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html#Definitions","page":"Vibration of a cube of nearly incompressible material","title":"Definitions","text":"","category":"section"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"This is the finite element toolkit itself.","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"using FinEtools","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"The linear stress analysis application is implemented in this package.","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"using FinEtoolsDeforLinear","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"Convenience import.","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"using FinEtools.MeshExportModule","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"The eigenvalue problem is solved with the Lanczos algorithm from this package.","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"using Arpack","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"The material properties and dimensions are defined with physical units.","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"E = 1*phun(\"PA\");\nnu = 0.499;\nrho = 1*phun(\"KG/M^3\");\na = 1*phun(\"M\"); # length of the side of the cube","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"We generate a mesh of  5 x 5 x 5 serendipity 20-node hexahedral elements in a regular grid.","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"fens, fes  = H20block(a, a, a, 5, 5, 5);","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"The problem is solved in three dimensions and hence we create the displacement field as three-dimensional with three displacement components per node. The degrees of freedom are then numbered  (note that no essential boundary conditions are applied, since the cube is free-floating).","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"geom = NodalField(fens.xyz)\nu = NodalField(zeros(size(fens.xyz,1),3)) # displacement field\nnumberdofs!(u);","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"The model is fully three-dimensional, and hence the material model  and the FEMM created below need to refer to an appropriate model-reduction scheme.","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"MR = DeforModelRed3D\nmaterial = MatDeforElastIso(MR, rho, E, nu, 0.0);","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"Note that we compute the stiffness  and the mass matrix using different FEMMs. The difference  is only the quadrature rule chosen: in order to make the mass matrix  non-singular, an accurate  Gauss rule  needs to be used, whereas for the stiffness matrix we want to avoid the excessive stiffness  and therefore the reduced Gauss rule is used.","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"femm = FEMMDeforLinear(MR, IntegDomain(fes, GaussRule(3,2)), material);\nK = stiffness(femm, geom, u)\nfemm = FEMMDeforLinear(MR, IntegDomain(fes, GaussRule(3,3)), material)\nM = mass(femm, geom, u);","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"The free vibration problem  can now be solved.   In order for the eigenvalue solver  to work well, we apply mass-shifting (otherwise the first matrix given to the solver – stiffness – would be singular). We specify the number of eigenvalues to solve for, and we  guess the frequency  with which to shift as 0.01 Hz.","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"neigvs = 20 # how many eigenvalues\nOmegaShift = (0.01*2*pi)^2; # The frequency with which to shift","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"The eigs routine can now be invoked to solve for a given number of frequencies from the smallest-magnitude end of the spectrum. Note that the mass shifting  needs to be undone when the solution is obtained.","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"evals, evecs, nconv = eigs(K+OmegaShift*M, M; nev=neigvs, which=:SM)\n@show nconv == neigvs\nevals = evals .- OmegaShift;\nfs = real(sqrt.(complex(evals)))/(2*pi)\nsigdig(n) = round(n * 10000) / 10000\nprintln(\"Eigenvalues: $(sigdig.(fs)) [Hz]\")","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"The first nonzero frequency, frequency 7, should be around .263 Hz.","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"The computed mode can be visualized in Paraview. Use the  \"Animation view\" to produce moving pictures for the mode.","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"mode = 7\nscattersysvec!(u, evecs[:,mode])\nFile =  \"unit_cube_modes.vtk\"\nvtkexportmesh(File, fens, fes; vectors=[(\"mode$mode\", u.values)])\n@async run(`\"paraview.exe\" $File`);","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"Finally  we export the model to Abaqus.  Note that we specify the mass density property (necessary for dynamics).","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"AE = AbaqusExporter(\"unit_cube_modes_h20\");\nHEADING(AE, \"Vibration modes of unit cube  of almost incompressible material.\");\nCOMMENT(AE, \"The  first six frequencies are rigid body modes.\");\nCOMMENT(AE, \"The  first nonzero frequency (7) should be around 0.26 Hz\");\nPART(AE, \"part1\");\nEND_PART(AE);\nASSEMBLY(AE, \"ASSEM1\");\nINSTANCE(AE, \"INSTNC1\", \"PART1\");\nNODE(AE, fens.xyz);\nCOMMENT(AE, \"The hybrid form of the serendipity hexahedron is chosen because\");\nCOMMENT(AE, \"the material is  nearly incompressible.\");\nELEMENT(AE, \"C3D20RH\", \"AllElements\", 1, connasarray(fes))\nORIENTATION(AE, \"GlobalOrientation\", vec([1. 0 0]), vec([0 1. 0]));\nSOLID_SECTION(AE, \"elasticity\", \"GlobalOrientation\", \"AllElements\");\nEND_INSTANCE(AE);\nEND_ASSEMBLY(AE);\nMATERIAL(AE, \"elasticity\")\nELASTIC(AE, E, nu)\nDENSITY(AE, rho)\nSTEP_FREQUENCY(AE, neigvs)\nEND_STEP(AE)\nclose(AE)","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"It remains is to load the model into Abaqus and execute it as a job. Alternatively Abaqus can be called on the input file to carry out the analysis at the command line as","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"abaqus job=unit_cube_modes_h20.inp","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"The output database unit_cube_modes_h20.odb can then be loaded for postprocessing, for instance from the command line as","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"abaqus viewer database=unit_cube_modes_h20.odb","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"Don't forget to compare the computed frequencies and the mode shapes.  For instance, the first six frequencies should be nearly 0, and the seventh frequency should be approximately  0.262 Hz. There may be  very minor differences due to the fact that  the FinEtools formulation is purely displacement-based, whereas the Abaqus model is hybrid (displacement plus pressure).","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"","category":"page"},{"location":"tutorials/unit_cube_modes_tut.html","page":"Vibration of a cube of nearly incompressible material","title":"Vibration of a cube of nearly incompressible material","text":"This page was generated using Literate.jl.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html#Beam-under-on/off-loading:-transient-response","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"","category":"section"},{"location":"tutorials/beam_load_on_off_tut.html#Description","page":"Beam under on/off loading: transient response","title":"Description","text":"","category":"section"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"A cantilever beam is loaded by a trapezoidal-pulse traction load at its free cross-section. The load is applied within 0.015 seconds and taken off after 0.37 seconds. The beam oscillates about its equilibrium configuration.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"The beam is modeled as a solid. Trapezoidal rule is used to integrate the equations of motion in time. Rayleigh mass- and stiffness-proportional damping is incorporated. The dynamic stiffness is factorized for efficiency.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"(Image: )","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html#Goals","page":"Beam under on/off loading: transient response","title":"Goals","text":"","category":"section"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"Show how to create the discrete model.\nApply distributed loading varying in time.\nDemonstrate  trapezoidal-rule time stepping.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"#","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html#Definitions","page":"Beam under on/off loading: transient response","title":"Definitions","text":"","category":"section"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"Basic imports.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"using LinearAlgebra\nusing Arpack","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"This is the finite element toolkit itself.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"using FinEtools","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"The linear stress analysis application is implemented in this package.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"using FinEtoolsDeforLinear\nusing FinEtoolsDeforLinear.AlgoDeforLinearModule","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"Input parameters","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"E = 205000*phun(\"MPa\");# Young's modulus\nnu = 0.3;# Poisson ratio\nrho = 7850*phun(\"KG*M^-3\");# mass density\nloss_tangent = 0.005;\nL = 200*phun(\"mm\");\nW = 4*phun(\"mm\");\nH = 8*phun(\"mm\");\ntolerance = W/500;\nqmagn = 0.1*phun(\"MPa\");\ntend = 0.5*phun(\"SEC\");\n\n\n#","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html#Create-the-discrete-model","page":"Beam under on/off loading: transient response","title":"Create the discrete model","text":"","category":"section"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"MR = DeforModelRed3D\nfens,fes  = H8block(L, W, H, 50, 2, 4)\n\ngeom = NodalField(fens.xyz)\nu = NodalField(zeros(size(fens.xyz,1),3)) # displacement field\n\nnl = selectnode(fens, box=[L L -Inf Inf -Inf Inf], inflate=tolerance)\nsetebc!(u, nl, true, 1)\nsetebc!(u, nl, true, 2)\nsetebc!(u, nl, true, 3)\napplyebc!(u)\nnumberdofs!(u)\n\ncorner = selectnode(fens, nearestto=[0 0 0])\ncornerzdof = u.dofnums[corner[1], 3]\n\nmaterial = MatDeforElastIso(MR, rho, E, nu, 0.0)\n\nfemm = FEMMDeforLinearMSH8(MR, IntegDomain(fes, GaussRule(3,2)), material)\nfemm = associategeometry!(femm, geom)\nK = stiffness(femm, geom, u)\nfemm = FEMMDeforLinear(MR, IntegDomain(fes, GaussRule(3,3)), material)\nM = mass(femm, geom, u)","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"Find the boundary finite elements at the tip cross-section of the beam. The uniform distributed loading will be applied to these elements.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"bdryfes = meshboundary(fes)","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"Those facing in the positive X direction will be chosen:","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"tipbfl = selectelem(fens, bdryfes, facing=true, direction=[-1.0 0.0 0.0])","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"A base finite element model machine will be created to evaluate the loading. The force intensity is created as driven by a function, but the function really only just fills the buffer with the constant loading vector.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"function pfun(forceout::FVec{T}, XYZ::FFltMat, tangents::FFltMat, fe_label::FInt) where {T}\n    forceout .=  [0.0, 0.0, -qmagn]\n    return forceout\nend\nfi = ForceIntensity(FFlt, 3, pfun);","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"The loading vector is lumped from the distributed uniform loading by integrating on the boundary. Hence, the dimension of the integration domain is 2.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"el1femm =  FEMMBase(IntegDomain(subset(bdryfes,tipbfl), GaussRule(2,2)))\nF = distribloads(el1femm, geom, u, fi, 2);","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"The loading function is defined as a time -dependent multiplier of the constant distribution of the loading on the structure.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"function tmult(t)\n    if (t <= 0.015)\n        t/0.015\n    else\n        if (t >= 0.4)\n            0.0\n        else\n            if (t <= 0.385)\n                1.0\n            else\n                (t - 0.4)/(0.385 - 0.4)\n            end\n        end\n    end\nend\n\n\n#","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html#Time-step-determination","page":"Beam under on/off loading: transient response","title":"Time step determination","text":"","category":"section"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"We figure out the fundamental mode frequency, which will determine the time step is a fraction of the period.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"evals, evecs = eigs(K, M; nev=1, which=:SM);","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"The fundamental angular frequency is then:","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"@show omega_f = sqrt(evals[1]);","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"We take  the time step to be a fraction of the period of vibration  in the fundamental mode.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"@show dt = 0.05 * 1/(omega_f/2/pi);\n\n\n#","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html#Damping-model","page":"Beam under on/off loading: transient response","title":"Damping model","text":"","category":"section"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"We take the damping to be representative of what's happening at the fundamental vibration frequency.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"For a given loss factor at a certain  frequency omega_f, the stiffness-proportional damping coefficient may be estimated as 2losstangent/\\omegaf$, and the mass-proportional damping coefficient may be estimated as 2losstangent*\\omegaf$.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"Rayleigh_mass = (loss_tangent/2)*omega_f;\nRayleigh_stiffness = (loss_tangent/2)/omega_f;","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"Now we construct the Rayleigh damping matrix as a linear combination of the stiffness and mass matrices.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"C = Rayleigh_stiffness * K + Rayleigh_mass * M","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"The time stepping loop is protected by let end to avoid unpleasant surprises with variables getting clobbered by globals.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"ts, corneruzs = let dt = dt, F = F","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"Initial displacement, velocity, and acceleration.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"    U0 = gathersysvec(u)\n    v = deepcopy(u)\n    V0 = gathersysvec(v)\n    U1 = fill(0.0, length(V0))\n    V1 = fill(0.0, length(V0))\n    F0 = deepcopy(F)\n    F1 = fill(0.0, length(V0))\n    R  = fill(0.0, length(V0))","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"Factorize the dynamic stiffness","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"    DSF = cholesky((M + (dt/2)*C + ((dt/2)^2)*K))","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"The times and displacements of the corner will be collected into two vectors","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"    ts = Float64[]\n    corneruzs = Float64[]","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"Let us begin the time integration loop:","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"    t = 0.0;\n    step = 0;\n    F0 .= tmult(t) .* F\n    while t < tend\n        push!(ts, t)\n        push!(corneruzs, U0[cornerzdof])\n        t = t+dt;\n        step = step + 1;\n        (mod(step,100)==0) && println(\"Step $(step): $(t)\")","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"Set the time-dependent load","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"        F1 .= tmult(t) .* F","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"Compute the out of balance force.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"        R = (M*V0 - C*(dt/2*V0) - K*((dt/2)^2*V0 + dt*U0) + (dt/2)*(F0+F1));","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"Calculate the new velocities.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"        V1 = DSF\\R;","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"Update the velocities.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"        U1 = U0 + (dt/2)*(V0+V1);","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"Switch the temporary vectors for the next step.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"        U0, U1 = U1, U0;\n        V0, V1 = V1, V0;\n        F0, F1 = F1, F0;\n        if (t == tend) # Are we done yet?\n            break;\n        end\n        if (t+dt > tend) # Adjust the last time step so that we exactly reach tend\n            dt = tend-t;\n        end\n    end\n    ts, corneruzs # return the collected results\nend\n\n#","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html#Plot-the-results","page":"Beam under on/off loading: transient response","title":"Plot the results","text":"","category":"section"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"using Gnuplot\n\n@gp ts corneruzs./phun(\"mm\") \"lw 2 lc rgb 'red' with lines title 'Displacement of the corner' \"\n@gp  :- \"set xlabel 'Time [s]'\"\n@gp  :- \"set ylabel 'Displacement [mm]'\"","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"The end.","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"true","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"","category":"page"},{"location":"tutorials/beam_load_on_off_tut.html","page":"Beam under on/off loading: transient response","title":"Beam under on/off loading: transient response","text":"This page was generated using Literate.jl.","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"R0031/3 Composite plate test","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"This is a test recommended by the National Agency for Finite Element Methods and Standards (U.K.): Test R0031/3 from NAFEMS publication R0031, “Composites Benchmarks,” February 1995. It is  a composite  (sandwich) plate of square shape, simply supported along all four edges. Uniform transverse loading is applied to the top skin. The modeled part is one quarter of the full plate here. The serendipity  quadratic hexahedra  are used, with full integration.","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"The solution  can be compared with the benchmark results  in the Abaqus manual \"Abaqus Benchmarks Guide\".","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"We begin  by using the toolkit FinEtools.","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"using FinEtools","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"Further, we use the linear-deformation application package.","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"using FinEtoolsDeforLinear","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"The problem will be solved with a pre-packaged algorithm.","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"using FinEtoolsDeforLinear.AlgoDeforLinearModule","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"For some basic statistics.","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"import Statistics: mean","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"The material parameters are specified for an orthotropic material model.  The units are attached using the phun function which can take the specification of the units and spits out the numerical multiplier. Here the benchmark specifies the input parameters in the English Imperial units. The skin  material:","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"E1s = 1.0e7*phun(\"psi\")\nE2s = 0.4e7*phun(\"psi\")\nE3s = 0.4e7*phun(\"psi\")\nnu12s = 0.3\nnu13s = 0.3\nnu23s = 0.3\nG12s = 0.1875e7*phun(\"psi\")\nG13s = 0.1875e7*phun(\"psi\")\nG23s = 0.1875e7*phun(\"psi\");","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"The core material:","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"E1c = 10.0*phun(\"psi\")\nE2c = 10.0*phun(\"psi\")\nE3c = 10e4.*phun(\"psi\")\nnu12c = 0.\nnu13c = 0.\nnu23c = 0.\nG12c = 10.0*phun(\"psi\")\nG13c = 3.0e4*phun(\"psi\")\nG23c = 1.2e4*phun(\"psi\");","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"The magnitude  of the distributed uniform transfers loading is","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"tmag = 100*phun(\"psi\");","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"Now we generate the mesh.   The sandwich plate volume is divided  into a regular Cartesian grid in the X and Y direction in the plane of the plate, and  in the thickness direction  it is divided  into three layers, with each layer again subdivided into multiple  elements.","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"L = 10.0*phun(\"in\") # side of the square plate\nnL = 8 # number of elements along the side of the plate\nxs = collect(linearspace(0.0, L/2, nL+1))\nys = collect(linearspace(0.0, L/2, nL+1));;","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"The thicknesses are specified from the bottom of the plate: skin, core, and then again skin.","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"ts = [0.028; 0.75; 0.028]*phun(\"in\")\nnts = [2; 3;  2]; # number of elements through the thickness for each layer","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"The H8layeredplatex meshing function generates the mesh and marks the elements  with a label identifying  the layer to which they belong.  We will use the label to create separate regions, with their own separate materials.","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"fens,fes = H8layeredplatex(xs, ys, ts, nts)","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"The linear hexahedra are subsequently converted to serendipity (quadratic) elements.","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"fens,fes = H8toH20(fens,fes);","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"The model reduction  here simply says this is a fully three-dimensional model.  The two orthotropic materials are created.","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"MR = DeforModelRed3D\nskinmaterial = MatDeforElastOrtho(MR,\n  0.0, E1s, E2s, E3s,\n  nu12s, nu13s, nu23s,\n  G12s, G13s, G23s,\n  0.0, 0.0, 0.0)\ncorematerial = MatDeforElastOrtho(MR,\n  0.0, E1c, E2c, E3c,\n  nu12c, nu13c, nu23c,\n  G12c, G13c, G23c,\n  0.0, 0.0, 0.0);","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"Now we are ready to create three material regions:  one for the bottom skin, one for the core, and one for the top skin. The selection of the finite elements assigned to each of the three regions is based on the label. Full Gauss quadrature  is used.","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"rl1 = selectelem(fens, fes, label=1)\nskinbot = FDataDict(\"femm\"=>FEMMDeforLinear(MR,\n    IntegDomain(subset(fes, rl1), GaussRule(3, 3)), skinmaterial))\n\nrl3 = selectelem(fens, fes, label=3)\nskintop = FDataDict(\"femm\"=>FEMMDeforLinear(MR,\n    IntegDomain(subset(fes, rl3), GaussRule(3, 3)), skinmaterial))\n\nrl2 = selectelem(fens, fes, label=2)\ncore = FDataDict(\"femm\"=>FEMMDeforLinear(MR,\n    IntegDomain(subset(fes, rl2), GaussRule(3, 3)), corematerial));","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"Note that since we did not specify the material coordinate system,  the default is assumed  (which is identical to the global Cartesian coordinate system).","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"@show skinbot[\"femm\"].mcsys","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"Next we select the nodes to which  essential boundary conditions  will be applied.  A node is selected  if it is within the specified box  which for the purpose of the test  is inflated in all directions by tolerance. The  nodes on the planes of symmetry need to be selected, and also  the nodes  along the edges (faces) to be simply supported  need to be identified.","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"tolerance = 0.0001*phun(\"in\")\nlx0 = selectnode(fens, box=[0.0 0.0 -Inf Inf -Inf Inf], inflate=tolerance)\nlxL2 = selectnode(fens, box=[L/2 L/2 -Inf Inf -Inf Inf], inflate=tolerance)\nly0 = selectnode(fens, box=[-Inf Inf 0.0 0.0 -Inf Inf], inflate=tolerance)\nlyL2 = selectnode(fens, box=[-Inf Inf L/2 L/2 -Inf Inf], inflate=tolerance);","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"We have four sides  of the quarter of the plate, two on each plane of symmetry, and two  along the circumference. Hence we create  four essential boundary condition definitions, one for each of the sides of the plate.","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"ex0 = FDataDict( \"displacement\"=>  0.0, \"component\"=> 3, \"node_list\"=>lx0 )\nexL2 = FDataDict( \"displacement\"=>  0.0, \"component\"=> 1, \"node_list\"=>lxL2 )\ney0 = FDataDict( \"displacement\"=>  0.0, \"component\"=> 3, \"node_list\"=>ly0 )\neyL2 = FDataDict( \"displacement\"=>  0.0, \"component\"=> 2, \"node_list\"=>lyL2 );","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"The traction on the top surface of the top skin is applied to the subset  of the surface mesh of the entire domain. First we compute the  boundary mesh, and then from the boundary mesh we select the surface finite elements that  \"face\" upward (along the positive Z axis).","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"bfes = meshboundary(fes)\nttopl = selectelem(fens, bfes; facing=true, direction = [0.0 0.0 1.0])\nTrac = FDataDict(\"traction_vector\"=>[0.0; 0.0; -tmag],\n    \"femm\"=>FEMMBase(IntegDomain(subset(bfes, ttopl), GaussRule(2, 3))));","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"The model data  is composed of the  finite element nodes, an array  of the regions, an array of the essential boundary condition definitions, and  an array of  the traction (natural) boundary condition definitions.","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"modeldata = FDataDict(\"fens\"=>fens,\n \"regions\"=>[skinbot, core, skintop], \"essential_bcs\"=>[ex0, exL2, ey0, eyL2],\n \"traction_bcs\"=> [Trac]\n );","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"With the model data assembled,  we can now call the algorithm.","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"modeldata = AlgoDeforLinearModule.linearstatics(modeldata);","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"The  computed solution can now be postprocessed. The displacement is reported at the center of the plate, along the line in the direction of the loading. We select all the nodes along this line.","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"u = modeldata[\"u\"]\ngeom = modeldata[\"geom\"]\nlcenter = selectnode(fens, box=[L/2 L/2  L/2 L/2 -Inf Inf], inflate=tolerance);","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"The variation of the displacement along this line  can be plotted  as (the bottom surface of the shell is at Z=0):","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"ix = sortperm(geom.values[lcenter, 3])","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"Plot the data","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"using Gnuplot\n\nGnuplot.gpexec(\"reset session\")\n@gp  \"set terminal windows 0 \"  :-\n@gp  :- geom.values[lcenter, 3][ix] u.values[lcenter, 3][ix]./phun(\"in\") \" lw 2 with lp title 'cold leg' \"  :-\n@gp  :- \"set xlabel 'Z coordinate [in]'\" :-\n@gp  :- \"set ylabel 'Vert displ [in]'\"","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"A reasonable single number to report for the deflection at the center is the average of the displacements at the nodes at the center of the plate (-0.136348):","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"cdis = mean(u.values[lcenter, 3])/phun(\"in\");\nprintln(\"Center node displacements $(cdis) [in]; NAFEMS-R0031-3 reference: –0.123 [in]\")","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"The reference displacement at the center of -0.123 [in] reported for the benchmark is evaluated from  an analytical formulation that neglects transverse  (pinching) deformation. Due to the soft core, significant pinching is observed. The solution to the benchmark  obtained in Abaqus  with incompatible hexahedral elements (with the same number of elements as in the stacked continuum shell solution) is -0.131 [in], which is close to our own solution. Hence, our own solution is probably more accurate than the reference solution because it includes an effect neglected in the benchmark solution.","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"The deformed shape can be investigated  visually in paraview (uncomment the line at the bottom if you have paraview in your  PATH):","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"File =  \"NAFEMS-R0031-3-plate.vtk\"\nvtkexportmesh(File, connasarray(fes), geom.values, FinEtools.MeshExportModule.VTK.H20;\n    scalars = [(\"Layer\", fes.label)], vectors = [(\"displacement\", u.values)])","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"@async run(\"paraview.exe\" $File);","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"Note that the  VTK file will contain element labels (which can help us distinguish between the layers) as scalar field, and the displacements as a vector field.","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"","category":"page"},{"location":"tutorials/R0031-3-Composite-benchmark_tut.html","page":"-","title":"-","text":"This page was generated using Literate.jl.","category":"page"},{"location":"tutorials/tutorials.html","page":"Tutorials","title":"Tutorials","text":"Table of contents","category":"page"},{"location":"tutorials/tutorials.html#Tutorials","page":"Tutorials","title":"Tutorials","text":"","category":"section"},{"location":"tutorials/tutorials.html","page":"Tutorials","title":"Tutorials","text":"Cook membrane, plane stress\nComposite benchmark R0031-3\nTwisted beam, export to Abaqus\nNearly incompressible cube vibration\nNearly incompressible cube vibration, alternative models\n13H benchmark, forced vibration\nFV32 benchmark, free vibration of trapezoidal membrane\nTracking a transient deformation of a cantilever beam\nBeam under on/off loading: transient response","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html#Vibration-of-a-cube-of-nearly-incompressible-material:-alternative-models","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"","category":"section"},{"location":"tutorials/unit_cube_modes_alt_tut.html#Description","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Description","text":"","category":"section"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"Compute the free-vibration spectrum of a unit cube of nearly incompressible isotropic material, E = 1, ν = 0.499, and ρ = 1 (refer to [1]).","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"The solution with the serendipity quadratic hexahedron is supplemented with solutions obtained with advanced finite elements: nodal-integration energy stabilized hexahedra and tetrahedra, and mean-strain hexahedra and tetrahedra.","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html#References","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"References","text":"","category":"section"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"[1] Puso MA, Solberg J (2006) A stabilized nodally integrated tetrahedral. International Journal for Numerical Methods in Engineering 67: 841-867. [2] P. Krysl, Mean-strain 8-node hexahedron with optimized energy-sampling stabilization, Finite Elements in Analysis and Design 108 (2016) 41–53.","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"(Image: )","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html#Goals","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Goals","text":"","category":"section"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"Set up a simulation loop that will run all the models and collect data.\nPresent the computed spectrum curves.","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"#","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html#Definitions","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Definitions","text":"","category":"section"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"This is the finite element toolkit itself.","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"using FinEtools","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"The linear stress analysis application is implemented in this package.","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"using FinEtoolsDeforLinear","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"Convenience import.","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"using FinEtools.MeshExportModule","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"The eigenvalue problem is solved with the Lanczos algorithm from this package.","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"using Arpack\n\nusing SymRCM","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"The material properties and dimensions are defined with physical units.","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"E = 1*phun(\"PA\");\nnu = 0.499;\nrho = 1*phun(\"KG/M^3\");\na = 1*phun(\"M\"); # length of the side of the cube\nN = 8\nneigvs = 20 # how many eigenvalues\nOmegaShift = (0.01*2*pi)^2; # The frequency with which to shift","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"The model is fully three-dimensional, and hence the material model  and the FEMM created below need to refer to an appropriate model-reduction scheme.","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"MR = DeforModelRed3D\nmaterial = MatDeforElastIso(MR, rho, E, nu, 0.0);","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"models = [\n    (\"H20\", H20block, GaussRule(3,2), FEMMDeforLinear, 1),\n    (\"ESNICEH8\", H8block, NodalTensorProductRule(3), FEMMDeforLinearESNICEH8, 2),\n    (\"ESNICET4\", T4block, NodalSimplexRule(3), FEMMDeforLinearESNICET4, 2),\n    (\"MSH8\", H8block, NodalTensorProductRule(3), FEMMDeforLinearMSH8, 2),\n    (\"MST10\", T10block, TetRule(4), FEMMDeforLinearMST10, 1),\n]","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"Run  the simulation loop over all the models.","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"sigdig(n) = round(n * 10000) / 10000\nresults = let\n    results = []\n    for m in models\n        fens, fes  = m[2](a, a, a, m[5]*N, m[5]*N, m[5]*N);\n        @show count(fens)\n        geom = NodalField(fens.xyz)\n        u = NodalField(zeros(size(fens.xyz,1),3))\n        numbering = let\n            C = connectionmatrix(FEMMBase(IntegDomain(fes, m[3])), count(fens))\n            numbering = symrcm(C)\n        end\n        numberdofs!(u, numbering);\n        println(\"nfreedofs = $(u.nfreedofs)\")\n\n        femm = m[4](MR, IntegDomain(fes, m[3]), material);\n        femm = associategeometry!(femm, geom)\n        K = stiffness(femm, geom, u)\n        M = mass(femm, geom, u);\n\n        evals, evecs, nconv = eigs(K+OmegaShift*M, M; nev=neigvs, which=:SM)\n        @show nconv == neigvs\n        evals = evals .- OmegaShift;\n        fs = real(sqrt.(complex(evals)))/(2*pi)\n        println(\"$(m[1]) eigenvalues: $(sigdig.(fs)) [Hz]\")\n        push!(results, (m, fs))\n    end\n    results # return it\nend\n\n#","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html#Present-the-results-graphically","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Present the results graphically","text":"","category":"section"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"using Gnuplot\n\n\n@gp  \"set terminal windows 0 \"  :-\nfor r in results\n    @gp  :- collect(1:length(r[2])) vec(r[2]) \" lw 2 with lp title '$(r[1][1])' \"  :-\nend\n@gp  :- \"set xlabel 'Mode number [ND]'\" :-\n@gp  :- \"set ylabel 'Frequency [Hz]'\"","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"","category":"page"},{"location":"tutorials/unit_cube_modes_alt_tut.html","page":"Vibration of a cube of nearly incompressible material: alternative models","title":"Vibration of a cube of nearly incompressible material: alternative models","text":"This page was generated using Literate.jl.","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html#Cook-panel-under-plane-stress","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"","category":"section"},{"location":"tutorials/Cook-plane-stress_tut.html#Description","page":"Cook panel under plane stress","title":"Description","text":"","category":"section"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"In this example we investigate the well-known benchmark of a tapered panel under plane stress conditions known under the name of Cook.  The problem has been solved many times with a variety of finite element models  and hence the solution is well-known.","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html#Goals","page":"Cook panel under plane stress","title":"Goals","text":"","category":"section"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"Show how to generate the mesh.\nExecute the simulation with a static-equilibrium algorithm (solver).","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"#","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html#Definitions","page":"Cook panel under plane stress","title":"Definitions","text":"","category":"section"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"The problem is solved in a script.  We begin  by using the top-level module FinEtools. Further, we use the linear-deformation application package.","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"using FinEtools\nusing FinEtoolsDeforLinear","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"With the algorithm modules, the problem can be set up (the materials, boundary conditions, and mesh are defined) and handed off to an algorithm (in this case linear static solution).  Then for postprocessing another set of algorithms can be invoked.","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"using FinEtoolsDeforLinear.AlgoDeforLinearModule","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"A few  input parameters are defined: the material parameters. Note: the units are consistent, but unnamed.","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"E = 1.0;\nnu = 1.0/3;","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"The geometry of the tapered panel.","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"width = 48.0; height = 44.0; thickness  = 1.0;\nfree_height  = 16.0;","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"Location of tracked  deflection is the midpoint of the loaded edge.","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"Mid_edge  = [48.0, 52.0];","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"The tapered panel is loaded along the free edge with a unit force, which is here converted to loading per unit area.","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"magn = 1.0/free_height/thickness;# Magnitude of applied load","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"For the above input parameters the converged displacement of the tip  of the tapered panel in the direction of the applied shear load is","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"convutip = 23.97;","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"The mesh is generated as a rectangular block to begin with, and then the coordinates of the nodes are tweaked into the tapered panel shape. In this case we are using quadratic triangles (T6).","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"n = 10; # number of elements per side\nfens, fes = T6block(width, height, n, n)","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"Reshape the rectangle into a trapezoidal panel:","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"for i in 1:count(fens)\n    fens.xyz[i,2] += (fens.xyz[i,1]/width)*(height -fens.xyz[i,2]/height*(height-free_height));\nend","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"The  boundary conditions  are applied to selected finite element nodes.   The selection is based on the inclusion in a selection \"box\".","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"tolerance = minimum([width, height])/n/1000.;#Geometrical tolerance","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"Clamped edge of the membrane","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"l1 = selectnode(fens; box=[0.,0.,-Inf, Inf], inflate = tolerance);","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"The list of the selected nodes is then used twice,  to fix the degree of freedom  in the direction 1 and  in the direction 2. The essential-boundary condition data is stored in  dictionaries: ess1 and ess2.  These dictionaries  are used below to compose the computational model.","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"ess1 = FDataDict(\"displacement\"=>  0.0, \"component\"=> 1, \"node_list\"=>l1);\ness2 = FDataDict(\"displacement\"=>  0.0, \"component\"=> 2, \"node_list\"=>l1);","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"The traction boundary condition is applied to the finite elements on the boundary of the panel. First we generate the three-node \"curve\" elements on the entire boundary of the panel.","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"boundaryfes =  meshboundary(fes);","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"Then from these finite elements we choose the ones that are inside the box that captures the edge of the geometry to which the traction should be applied.","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"Toplist  = selectelem(fens, boundaryfes, box= [width, width, -Inf, Inf ], inflate=  tolerance);","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"To apply the traction we create a finite element model machine (FEMM). For the evaluation of the traction it is sufficient to create a  \"base\" FEMM.  It consists of the geometry data IntegDomain (connectivity,  integration rule, evaluation  of the basis functions  and basis function gradients with respect to the parametric coordinates). This object is composed of the list of the finite elements and  an appropriate quadrature rule (Gauss rule here).","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"el1femm = FEMMBase(IntegDomain(subset(boundaryfes, Toplist), GaussRule(1, 3), thickness));","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"The traction boundary condition is specified with a constant traction vector and the FEMM that will be used to evaluate  the load vector.","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"flux1 = FDataDict(\"traction_vector\"=>[0.0,+magn],\n    \"femm\"=>el1femm\n    );","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"We make the dictionary for the region (the interior of the domain).  The FEMM for the evaluation of the integrals over the interior of the domain (that is the stiffness matrix) and the material are needed. The geometry data  now is equipped with the  triangular  three-point rule. Note the model-reduction type which is used to dispatch to appropriate specializations of the material routines and the FEMM which needs to execute different code for different reduced-dimension models. Here the model reduction is \"plane stress\".","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"MR = DeforModelRed2DStress\nmaterial = MatDeforElastIso(MR,  0.0, E, nu, 0.0)\nregion1 = FDataDict(\"femm\"=>FEMMDeforLinear(MR, IntegDomain(fes, TriRule(3), thickness), material));","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"The model data is a dictionary.   In the present example it consists of the node set, the array of dictionaries for the regions, and arrays of dictionaries for each essential and natural boundary condition.","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"modeldata = FDataDict(\"fens\"=>fens,\n \"regions\"=>[region1],\n \"essential_bcs\"=>[ess1, ess2],\n \"traction_bcs\"=>[flux1]\n );","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"When the model data is defined, we simply pass it to the algorithm.","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"modeldata = AlgoDeforLinearModule.linearstatics(modeldata);","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"The model data is augmented in the algorithm by the nodal field representing the geometry and the displacement field  computed by solving the system of linear algebraic equations of equilibrium.","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"u = modeldata[\"u\"];\ngeom = modeldata[\"geom\"];","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"The complete information returned from the algorithm  is","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"@show keys(modeldata)","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"Now we can extract the displacement at the mid-edge node and compare to the converged (reference) value. The code below selects the node inside a very small box of the size tolerance which presumably contains only a single node, the one at the midpoint of the edge.","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"nl = selectnode(fens, box=[Mid_edge[1],Mid_edge[1],Mid_edge[2],Mid_edge[2]],\n          inflate=tolerance);\ntheutip = u.values[nl,:]\nprintln(\"displacement =$(theutip[2]) as compared to converged $convutip\")","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"For postprocessing  we will export a VTK file  with the displacement field (vectors)  and  one scalar field (sigma_xy).","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"modeldata[\"postprocessing\"] = FDataDict(\"file\"=>\"cookstress\",\n   \"quantity\"=>:Cauchy, \"component\"=>:xy);\nmodeldata = AlgoDeforLinearModule.exportstress(modeldata);","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"The  attribute \"postprocessing\" holds additional data computed and returned by the algorithm:","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"@show keys(modeldata[\"postprocessing\"])","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"The exported data can be digested as follows: modeldata[\"postprocessing\"] [\"exported\"] is an array of exported items.","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"display(keys(modeldata[\"postprocessing\"][\"exported\"]))","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"Each entry of the array is a dictionary:","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"display(keys(modeldata[\"postprocessing\"][\"exported\"][1]))","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"Provided we have  paraview in the PATH, we can bring it up  to display the exported data.","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"File = modeldata[\"postprocessing\"][\"exported\"][1][\"file\"]\n@async run(`\"paraview.exe\" $File`);","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"We can also extract the minimum and maximum value of the shear stress (-0.06, and 0.12).","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"display(modeldata[\"postprocessing\"][\"exported\"][1][\"quantity\"])\ndisplay(modeldata[\"postprocessing\"][\"exported\"][1][\"component\"])\nfld = modeldata[\"postprocessing\"][\"exported\"][1][\"field\"]\nprintln(\"$(minimum(fld.values)) $(maximum(fld.values))\")\n\ntrue","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"","category":"page"},{"location":"tutorials/Cook-plane-stress_tut.html","page":"Cook panel under plane stress","title":"Cook panel under plane stress","text":"This page was generated using Literate.jl.","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html#Tracking-a-transient-deformation-of-a-cantilever-beam","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"","category":"section"},{"location":"tutorials/bending_wave_Ray_tut.html#Description","page":"Tracking a transient deformation of a cantilever beam","title":"Description","text":"","category":"section"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"A cantilever beam is given an initial velocity and then at time 0.0 it is suddenly stopped by fixing one of its ends. This sends a wave down the beam.","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"The beam is modeled as a solid. Trapezoidal rule is used to integrate the equations of motion in time. Rayleigh mass-proportional damping is incorporated. The dynamic stiffness is factorized for efficiency.","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html#Goals","page":"Tracking a transient deformation of a cantilever beam","title":"Goals","text":"","category":"section"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"Show how to create the discrete model.\nDemonstrate  trapezoidal-rule time stepping.","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"#","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html#Definitions","page":"Tracking a transient deformation of a cantilever beam","title":"Definitions","text":"","category":"section"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"Basic imports.","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"using LinearAlgebra\nusing Arpack","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"This is the finite element toolkit itself.","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"using FinEtools","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"The linear stress analysis application is implemented in this package.","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"using FinEtoolsDeforLinear\nusing FinEtoolsDeforLinear.AlgoDeforLinearModule","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"Input parameters","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"E = 205000*phun(\"MPa\");# Young's modulus\nnu = 0.3;# Poisson ratio\nrho = 7850*phun(\"KG*M^-3\");# mass density\nloss_tangent = 0.0001;\nfrequency = 1/0.0058;\nRayleigh_mass = 2*loss_tangent*(2*pi*frequency);\nL = 200*phun(\"mm\");\nW = 4*phun(\"mm\");\nH = 8*phun(\"mm\");\ntolerance = W/500;\nvmag = 0.1*phun(\"m\")/phun(\"SEC\");\ntend = 0.013*phun(\"SEC\");\n\n#","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html#Create-the-discrete-model","page":"Tracking a transient deformation of a cantilever beam","title":"Create the discrete model","text":"","category":"section"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"MR = DeforModelRed3D\nfens,fes  = H8block(L,W,H, 50,1,4)\n\ngeom = NodalField(fens.xyz)\nu = NodalField(zeros(size(fens.xyz,1),3)) # displacement field\n\nnl = selectnode(fens, box=[L L -Inf Inf -Inf Inf], inflate=tolerance)\nsetebc!(u, nl, true, 1)\nsetebc!(u, nl, true, 2)\nsetebc!(u, nl, true, 3)\napplyebc!(u)\nnumberdofs!(u)\n\ncorner = selectnode(fens, nearestto=[0 0 0])\ncornerzdof = u.dofnums[corner[1], 3]\n\nmaterial = MatDeforElastIso(MR, rho, E, nu, 0.0)\n\nfemm = FEMMDeforLinear(MR, IntegDomain(fes, GaussRule(3,2)), material)\nfemm = associategeometry!(femm, geom)\nK = stiffness(femm, geom, u)\nfemm = FEMMDeforLinear(MR, IntegDomain(fes, GaussRule(3,3)), material)\nM = mass(femm, geom, u)\nC = Rayleigh_mass * M","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"Figure out the highest frequency in the model, and use a time step that is considerably larger than the period of that highest frequency.","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"evals, evecs = eigs(K, M; nev=1, which=:LM);\ndt = 350 * 2/sqrt(evals[1]);","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"The time stepping loop is protected by let end to avoid unpleasant surprises with variables getting clobbered by globals.","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"ts, corneruzs = let dt = dt","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"Initial displacement, velocity, and acceleration.","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"    U0 = gathersysvec(u)\n    v = deepcopy(u)\n    v.values[:, 3] .= vmag\n    V0 = gathersysvec(v)\n    F0 = fill(0.0, length(V0))\n    U1 = fill(0.0, length(V0))\n    V1 = fill(0.0, length(V0))\n    F1 = fill(0.0, length(V0))\n    R  = fill(0.0, length(V0))","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"Factorize the dynamic stiffness","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"    DSF = cholesky((M + (dt/2)*C + ((dt/2)^2)*K))","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"The times and displacements of the corner will be collected into two vectors","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"    ts = Float64[]\n    corneruzs = Float64[]","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"Let us begin the time integration loop:","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"    t = 0.0;\n    step = 0;\n    while t < tend\n        push!(ts, t)\n        push!(corneruzs, U0[cornerzdof])\n        t = t+dt;\n        step = step + 1;\n        (mod(step,25)==0) && println(\"Step $(step): $(t)\")","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"Zero out the load","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"        fill!(F1, 0.0);","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"Compute the out of balance force.","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"        R = (M*V0 - C*(dt/2*V0) - K*((dt/2)^2*V0 + dt*U0) + (dt/2)*(F0+F1));","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"Calculate the new velocities.","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"        V1 = DSF\\R;","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"Update the velocities.","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"        U1 = U0 + (dt/2)*(V0+V1);","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"Switch the temporary vectors for the next step.","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"        U0, U1 = U1, U0;\n        V0, V1 = V1, V0;\n        F0, F1 = F1, F0;\n        if (t == tend) # Are we done yet?\n            break;\n        end\n        if (t+dt > tend) # Adjust the last time step so that we exactly reach tend\n            dt = tend-t;\n        end\n    end\n    ts, corneruzs # return the collected results\nend\n\n#","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html#Plot-the-results","page":"Tracking a transient deformation of a cantilever beam","title":"Plot the results","text":"","category":"section"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"using Gnuplot\n\n@gp ts corneruzs./phun(\"mm\") \"lw 2 lc rgb 'red' with lines title 'Displacement of the corner' \"\n@gp  :- \"set xlabel 'Time [s]'\"\n@gp  :- \"set ylabel 'Displacement [mm]'\"","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"The end.","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"true","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"","category":"page"},{"location":"tutorials/bending_wave_Ray_tut.html","page":"Tracking a transient deformation of a cantilever beam","title":"Tracking a transient deformation of a cantilever beam","text":"This page was generated using Literate.jl.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html#Export-to-Abaqus","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"","category":"section"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"In this example  we show how to export a model  to the finite element software Abaqus.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"The model is solved also in the example twisted_beam_algo.jl.  Here we export the model for execution in Abaqus.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"The task begins with defining the input parameters, creating the mesh, identifying the nodes  to which essential boundary conditions are to be applied,  and extracting from the boundary the surface finite elements to which the traction loading at the end of the beam is to be applied.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"This is the finite element toolkit itself.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"using FinEtools","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"The linear stress analysis application is implemented in this package.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"using FinEtoolsDeforLinear","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"We will also use specifically some functions from these modules.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"using FinEtoolsDeforLinear.AlgoDeforLinearModule\nusing FinEtools.MeshExportModule","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"Define some parameters, in consistent units.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"E = 0.29e8;\nnu = 0.22;\nW = 1.1;\nL = 12.;\nt =  0.32;\nnl = 2; nt = 1; nw = 1; ref = 2;\np =   1/W/t;","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"Loading in the Z direction. Reference (publication by Harder): 5.424e-3.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"loadv = [0;0;p]; dir = 3; uex = 0.005424534868469;","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"Loading in the Y direction. Reference (Harder): 1.754e-3. And comment the line below to obtain a solution in the other direction.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"#loadv = [0;p;0]; dir = 2; uex = 0.001753248285256;\ntolerance  = t/1000;\n\nfens,fes  = H8block(L,W,t, nl*ref,nw*ref,nt*ref)","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"Reshape the rectangular block into a twisted beam shape.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"for i = 1:count(fens)\n    let\n        a = fens.xyz[i,1]/L*(pi/2); y = fens.xyz[i,2]-(W/2); z = fens.xyz[i,3]-(t/2);\n        fens.xyz[i,:] = [fens.xyz[i,1],y*cos(a)-z*sin(a),y*sin(a)+z*cos(a)];\n    end\nend","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"Clamped face of the beam: select all the nodes in this cross-section.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"l1  = selectnode(fens; box = [0 0 -100*W 100*W -100*W 100*W], inflate  =  tolerance)","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"Traction on the opposite face","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"boundaryfes  =   meshboundary(fes);\nToplist   = selectelem(fens,boundaryfes, box =  [L L -100*W 100*W -100*W 100*W], inflate =   tolerance);","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"The tutorial proper begins here. We create the Abaqus exporter and start writing the .inp file.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"AE = AbaqusExporter(\"twisted_beam\");\nHEADING(AE, \"Twisted beam example\");","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"The  part definition is trivial: all will be defined rather for the instance of the part.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"PART(AE, \"part1\");\nEND_PART(AE);","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"The assembly will consist  of a single instance (of the empty part defined above).  The node set will be defined for the instance itself.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"ASSEMBLY(AE, \"ASSEM1\");\nINSTANCE(AE, \"INSTNC1\", \"PART1\");\nNODE(AE, fens.xyz);","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"We export the finite elements themselves.  Note that the elements  need to have  distinct numbers.  We start numbering the hexahedra at 1. The definition of the element creates simultaneously an element set  which is used below in the section assignment (and the definition of the load).","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"ELEMENT(AE, \"c3d8rh\", \"AllElements\", 1, connasarray(fes))","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"The traction is applied to surface elements.  Because the elements in the Abaqus model need to have unique numbers, we need to start from an integer  which is  the number of the solid elements plus one.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"ELEMENT(AE, \"SFM3D4\", \"TractionElements\", 1+count(fes), connasarray(subset(boundaryfes,Toplist)))","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"The nodes in the clamped cross-section are going to be grouped in the node set l1.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"NSET_NSET(AE, \"l1\", l1)","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"We define a coordinate system  (orientation of the material  coordinate system), in this example it is the global Cartesian coordinate system. The sections are defined for the solid elements of the interior and the surface elements to which the traction is applied, and the assignment to the  elements is by element set (AllElements and TractionElements). Note that for the solid section we also define reference  to hourglass control named Hourglassctl.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"ORIENTATION(AE, \"GlobalOrientation\", vec([1. 0 0]), vec([0 1. 0]));\nSOLID_SECTION(AE, \"elasticity\", \"GlobalOrientation\", \"AllElements\", \"Hourglassctl\");\nSURFACE_SECTION(AE, \"TractionElements\")","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"This concludes the definition  of the instance  and of the assembly.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"END_INSTANCE(AE);\nEND_ASSEMBLY(AE);","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"This is the definition of the isotropic elastic material.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"MATERIAL(AE, \"elasticity\")\nELASTIC(AE, E, nu)","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"The element properties for the interior hexahedra are controlled by the section-control.  In this case we are selecting enhanced hourglass stabilization (much preferable to the default  stiffness stabilization).","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"SECTION_CONTROLS(AE, \"Hourglassctl\", \"HOURGLASS=ENHANCED\")","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"The static perturbation  analysis step is defined  next.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"STEP_PERTURBATION_STATIC(AE)","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"The boundary conditions are applied directly to the node set l1.   Since the node set is defined for the instance, we need to refer to it by the qualified name ASSEM1.INSTNC1.l1.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"BOUNDARY(AE, \"ASSEM1.INSTNC1.l1\", 1)\nBOUNDARY(AE, \"ASSEM1.INSTNC1.l1\", 2)\nBOUNDARY(AE, \"ASSEM1.INSTNC1.l1\", 3)","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"The traction is applied to the surface  quadrilateral elements exported above.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"DLOAD(AE, \"ASSEM1.INSTNC1.TractionElements\", vec(loadv))","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"Now we have defined  the analysis step and the definition of the model can be concluded.","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"END_STEP(AE)\nclose(AE)","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"As quick check, here is the contents of the  exported model file:","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"@show readlines(\"twisted_beam.inp\")","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"What remains is to load the model into Abaqus and execute it as a job.  Alternatively Abaqus can be called on the input file to carry out the analysis at the command line as","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"abaqus job=twisted_beam.inp","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"The output database twisted_beam.odb can then be loaded for postprocessing, for instance from the command line as","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"abaqus viewer database=twisted_beam.odb","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"nothing","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"","category":"page"},{"location":"tutorials/twisted_beam-export-to-abaqus_tut.html","page":"Export  to Abaqus","title":"Export  to Abaqus","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#FinEtoolsDeforLinearTutorials-Documentation","page":"Home","title":"FinEtoolsDeforLinearTutorials Documentation","text":"","category":"section"},{"location":"index.html#Tutorials","page":"Home","title":"Tutorials","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The tutorials are provided in the form of Julia scripts and Markdown files. ","category":"page"},{"location":"tutorials/TEST13H_tut.html#TEST-13H:-square-plate-under-harmonic-loading","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"","category":"section"},{"location":"tutorials/TEST13H_tut.html#Description","page":"TEST 13H: square plate under harmonic loading","title":"Description","text":"","category":"section"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"Harmonic forced vibration problem is solved for a homogeneous square plate, simply-supported on the circumference. This is the TEST 13H from the Abaqus v 6.12 Benchmarks manual. The test is recommended by the National Agency for Finite Element Methods and Standards (U.K.): Test 13 from NAFEMS “Selected Benchmarks for Forced Vibration,” R0016, March 1993.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"The plate is discretized with hexahedral solid elements. The simple support condition is approximated by distributed rollers on the boundary. Because only the out of plane displacements are prevented, the structure has three rigid body modes in the plane of the plate.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"Homogeneous square plate, simply-supported on the circumference from the test 13 from NAFEMS “Selected Benchmarks for Forced Vibration,” R0016, March 1993. The nonzero benchmark frequencies are (in hertz): 2.377, 5.961, 5.961, 9.483, 12.133, 12.133, 15.468, 15.468 [Hz].","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"(Image: )","category":"page"},{"location":"tutorials/TEST13H_tut.html#References","page":"TEST 13H: square plate under harmonic loading","title":"References","text":"","category":"section"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"[1] NAFEMS “Selected Benchmarks for Forced Vibration,” R0016, March 1993.","category":"page"},{"location":"tutorials/TEST13H_tut.html#Goals","page":"TEST 13H: square plate under harmonic loading","title":"Goals","text":"","category":"section"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"Show how to generate hexahedral mesh, mirroring and merging together parts.\nExecute transient simulation by the trapezoidal-rule time stepping of [1].","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"#","category":"page"},{"location":"tutorials/TEST13H_tut.html#Definitions","page":"TEST 13H: square plate under harmonic loading","title":"Definitions","text":"","category":"section"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"Bring in required support.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"using FinEtools\nusing FinEtoolsDeforLinear\nusing LinearAlgebra\nusing Arpack","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"The input parameters come from [1].","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"E = 200*phun(\"GPa\");# Young's modulus\nnu = 0.3;# Poisson ratio\nrho = 8000*phun(\"kg*m^-3\");# mass density\nqmagn = 100.0*phun(\"Pa\")\nL = 10.0*phun(\"m\"); # side of the square plate\nt = 0.05*phun(\"m\"); # thickness of the square plate\nnL = 16; nt = 4;\ntolerance = t/nt/100;\nfrequencies = vcat(linearspace(0.0,2.377,15), linearspace(2.377,15.0,40))","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"Compute the parameters of Rayleigh damping. For the two selected frequencies we have the relationship between the damping ratio and the Rayleigh parameters","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"xi_m=a_0omega_m+a_1omega_m","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"where m=12.  Solving for the Rayleigh parameters a_0a_1 yields:","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"zeta1 = 0.02; zeta2 = 0.02;\no1 = 2*pi*2.377;  o2 = 2*pi*15.468;\na0 = 2*(o1*o2)/(o2^2-o1^2)*(o2*zeta1-o1*zeta2);# a0\na1 = 2*(o1*o2)/(o2^2-o1^2)*(-1/o2*zeta1+1/o1*zeta2);# a1\n\n#","category":"page"},{"location":"tutorials/TEST13H_tut.html#Discrete-model","page":"TEST 13H: square plate under harmonic loading","title":"Discrete model","text":"","category":"section"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"Generate the finite element domain as a block.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"fens,fes  = H8block(L, L, t, nL, nL, nt)","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"Create the geometry field.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"geom = NodalField(fens.xyz)","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"Create the displacement field. Note that it holds complex numbers.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"u = NodalField(zeros(FCplxFlt, size(fens.xyz,1), 3)) # displacement field","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"In order to apply the essential boundary conditions we need to select the nodes along the side faces of the plate and support them in the Z direction.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"nl = selectnode(fens, box=[0.0 0.0 -Inf Inf -Inf Inf], inflate=tolerance)\nsetebc!(u, nl, true, 3)\nnl = selectnode(fens, box=[L L -Inf Inf -Inf Inf], inflate=tolerance)\nsetebc!(u, nl, true, 3)\nnl = selectnode(fens, box=[-Inf Inf 0.0 0.0 -Inf Inf], inflate=tolerance)\nsetebc!(u, nl, true, 3)\nnl = selectnode(fens, box=[-Inf Inf L L -Inf Inf], inflate=tolerance)\nsetebc!(u, nl, true, 3)","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"Those boundary conditions can now be applied to the displacement field,...","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"applyebc!(u)","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"... and the degrees of freedom can be numbered.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"numberdofs!(u)\nprintln(\"nfreedofs = $(u.nfreedofs)\")","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"The model is three-dimensional.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"MR = DeforModelRed3D\nmaterial = MatDeforElastIso(MR, rho, E, nu, 0.0)","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"Given how relatively thin the plate is we choose an effective element: the mean-strain hexahedral element which is quite tolerant of the high aspect ratio.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"femm = FEMMDeforLinearMSH8(MR, IntegDomain(fes, GaussRule(3,2)), material)","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"These elements require  to know the geometry before anything else can be computed using them in a finite element machine. Hence we first need to associate the geometry with the FEMM.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"femm = associategeometry!(femm, geom)","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"Now we can calculate the stiffness matrix and the mass matrix: both evaluated with the high-order Gauss rule.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"K = stiffness(femm, geom, u)\nfemm = FEMMDeforLinear(MR, IntegDomain(fes, GaussRule(3,3)), material)\nM = mass(femm, geom, u)","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"The damping matrix is a linear combination of the mass matrix and the stiffness matrix (Rayleigh model).","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"C = a0*M + a1*K","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"Find the boundary finite elements on top of the plate. The uniform distributed loading will be applied to these elements.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"bdryfes = meshboundary(fes)","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"Those facing up (in the positive Z direction) will be chosen:","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"topbfl = selectelem(fens, bdryfes, facing=true, direction=[0.0 0.0 1.0])","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"A base finite element model machine will be created to evaluate the loading. The force intensity is created as driven by a function, but the function really only just fills the buffer with the constant loading vector.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"function pfun(forceout::FVec{T}, XYZ::FFltMat, tangents::FFltMat, fe_label::FInt) where {T}\n    forceout .=  [0.0, 0.0, -qmagn]\n    return forceout\nend\nfi = ForceIntensity(FFlt, 3, pfun);","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"The loading vector is lumped from the distributed uniform loading by integrating on the boundary. Hence, the dimension of the integration domain is 2.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"el1femm =  FEMMBase(IntegDomain(subset(bdryfes,topbfl), GaussRule(2,2)))\nF = distribloads(el1femm, geom, u, fi, 2);\n\n#","category":"page"},{"location":"tutorials/TEST13H_tut.html#Sweep-through-the-frequencies","page":"TEST 13H: square plate under harmonic loading","title":"Sweep through the frequencies","text":"","category":"section"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"Sweep through the frequencies and calculate the complex displacement vector for each  of the frequencies from the complex balance equations of the structure.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"The entire solution will be stored  in this array:","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"U1 = zeros(FCplxFlt, u.nfreedofs, length(frequencies))\n\nprint(\"Sweeping through $(length(frequencies)) frequencies\\n\")\nfor k in 1:length(frequencies)\n    f = frequencies[k];\n    omega = 2*pi*f;\n    U1[:, k] = (-omega^2*M + 1im*omega*C + K)\\F;\n    print(\".\")\nend\nprint(\"\\n\")","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"Find the midpoint of the plate bottom surface.  For this purpose the number of elements along the edge of the plate needs to be divisible by two.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"midpoint = selectnode(fens, box=[L/2 L/2 L/2 L/2 0 0], inflate=tolerance);","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"Check that we found that node.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"@assert midpoint != []","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"Extract the displacement component in the vertical direction (Z).","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"midpointdof = u.dofnums[midpoint, 3]\n\n#","category":"page"},{"location":"tutorials/TEST13H_tut.html#Plot-the-results","page":"TEST 13H: square plate under harmonic loading","title":"Plot the results","text":"","category":"section"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"using Gnuplot","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"Plot the amplitude of the FRF.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"umidAmpl = abs.(U1[midpointdof, :])/phun(\"MM\")\n@gp \"set terminal windows 0 \" :-\n@gp  :- vec(frequencies) vec(umidAmpl) \"lw 2 lc rgb 'red' with lines title 'Displacement of the corner' \" :-\n@gp  :- \"set xlabel 'Frequency [Hz]'\" :-\n@gp  :- \"set ylabel 'Midpoint  displacement amplitude [mm]'\"","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"Plot the FRF real and imaginary components.","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"umidReal = real.(U1[midpointdof, :])/phun(\"MM\")\numidImag = imag.(U1[midpointdof, :])/phun(\"MM\")\n@gp  \"set terminal windows 1 \"  :-\n@gp  :- vec(frequencies) vec(umidReal) \"lw 2 lc rgb 'red' with lines title 'Real' \"  :-\n@gp  :- vec(frequencies) vec(umidImag) \"lw 2 lc rgb 'blue' with lines title 'Imaginary' \"  :-\n@gp  :- \"set xlabel 'Frequency [Hz]'\" :-\n@gp  :- \"set ylabel 'Midpoint  displacement FRF [mm]'\"","category":"page"},{"location":"tutorials/TEST13H_tut.html#Plot-the-shift-of-the-FRF.","page":"TEST 13H: square plate under harmonic loading","title":"Plot the shift of the FRF.","text":"","category":"section"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"umidPhase = atan.(umidImag, umidReal)/pi*180\n@gp  \"set terminal windows 2 \"  :-\n@gp  :- vec(frequencies) vec(umidPhase) \"lw 2 lc rgb 'red' with lines title 'Phase shift' \"  :-\n@gp  :- \"set xlabel 'Frequency [Hz]'\" :-\n@gp  :- \"set ylabel 'Phase shift [deg]'\"\n\n\ntrue","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"","category":"page"},{"location":"tutorials/TEST13H_tut.html","page":"TEST 13H: square plate under harmonic loading","title":"TEST 13H: square plate under harmonic loading","text":"This page was generated using Literate.jl.","category":"page"}]
}
